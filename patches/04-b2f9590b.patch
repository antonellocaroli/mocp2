commit b2f9590bb1768e1561f0e997df7f15b3fab53d34
Author: John Fitzgerald <jcf@home>
Date:   Fri Jul 8 04:52:52 2016 +0000

    ALSA: Refactor device opening code.
    
    git-svn-id: svn://svn.daper.net/moc/trunk@2899 910807d9-36e0-0310-a014-e9ea483e2ba4

Index: x/moc-t1/alsa.c
===================================================================
--- x.orig/moc-t1/alsa.c	2022-01-17 10:30:35.094472203 +1300
+++ x/moc-t1/alsa.c	2022-01-17 10:31:30.973467020 +1300
@@ -137,36 +137,50 @@ static void alsa_shutdown ()
 #endif
 }
 
-/* Fill caps with the device capabilities. Return 0 on error. */
-static int fill_capabilities (struct output_driver_caps *caps)
+static snd_pcm_hw_params_t *alsa_open_device (const char *device)
 {
-	snd_pcm_hw_params_t *hw_params;
-	snd_pcm_format_mask_t *format_mask;
-	int err;
-	unsigned int val;
+	snd_pcm_hw_params_t *result;
+	int rc;
 
-	if ((err = snd_pcm_open(&handle, options_get_str("AlsaDevice"),
-					SND_PCM_STREAM_PLAYBACK,
-					SND_PCM_NONBLOCK)) < 0) {
-		error ("Can't open audio: %s", snd_strerror(err));
-		return 0;
+	rc = snd_pcm_open (&handle, device, SND_PCM_STREAM_PLAYBACK,
+	                                    SND_PCM_NONBLOCK);
+	if (rc < 0) {
+		error ("Can't open audio: %s", snd_strerror (rc));
+		return NULL;
 	}
 
-	if ((err = snd_pcm_hw_params_malloc(&hw_params)) < 0) {
+	rc = snd_pcm_hw_params_malloc (&result);
+	if (rc < 0) {
 		error ("Can't allocate alsa hardware parameters structure: %s",
-				snd_strerror(err));
+		        snd_strerror (rc));
 		snd_pcm_close (handle);
-		return 0;
+		return NULL;
 	}
 
-	if ((err = snd_pcm_hw_params_any (handle, hw_params)) < 0) {
+	rc = snd_pcm_hw_params_any (handle, result);
+	if (rc < 0) {
 		error ("Can't initialize hardware parameters structure: %s",
-				snd_strerror(err));
-		snd_pcm_hw_params_free (hw_params);
+		        snd_strerror (rc));
+		snd_pcm_hw_params_free (result);
 		snd_pcm_close (handle);
-		return 0;
+		return NULL;
 	}
 
+	return result;
+}
+
+/* Fill caps with the device capabilities. Return 0 on error. */
+static int fill_capabilities (struct output_driver_caps *caps)
+{
+	snd_pcm_hw_params_t *hw_params;
+	snd_pcm_format_mask_t *format_mask;
+	int err;
+	unsigned int val;
+
+	hw_params = alsa_open_device (options_get_str ("ALSADevice"));
+	if (!hw_params)
+		return 0;
+
 	if ((err = snd_pcm_hw_params_get_channels_min (hw_params, &val)) < 0) {
 		error ("Can't get the minimum number of channels: %s",
 				snd_strerror(err));
@@ -411,25 +425,9 @@ static int alsa_open (struct sound_param
 	device = options_get_str ("ALSADevice");
 	logit ("Opening ALSA device: %s", device);
 
-	if ((err = snd_pcm_open(&handle, device,
-					SND_PCM_STREAM_PLAYBACK,
-					SND_PCM_NONBLOCK)) < 0) {
-		error ("Can't open audio: %s", snd_strerror(err));
-		return 0;
-	}
-
-	if ((err = snd_pcm_hw_params_malloc(&hw_params)) < 0) {
-		error ("Can't allocate alsa hardware parameters structure: %s",
-				snd_strerror(err));
+	hw_params = alsa_open_device (device);
+	if (!hw_params)
 		return 0;
-	}
-
-	if ((err = snd_pcm_hw_params_any (handle, hw_params)) < 0) {
-		error ("Can't initialize hardware parameters structure: %s",
-				snd_strerror(err));
-		snd_pcm_hw_params_free (hw_params);
-		return 0;
-	}
 
 	if ((err = snd_pcm_hw_params_set_access (handle, hw_params, SND_PCM_ACCESS_RW_INTERLEAVED)) < 0) {
 		error ("Can't set alsa access type: %s", snd_strerror(err));
